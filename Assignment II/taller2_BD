3-
SELECT P.ID_PATIENT,P.PATIENT_NAME, P.PATIENT_ADDRESS, PB.DATE_BILL, PBD.CHARGE, PB.BALANCE_DUE, PBD.ID_PATIENT_BILL_DETAIL
FROM PATIENT P INNER JOIN PATIENT_BILL PB ON P.ID_PATIENT = PB.ID_PATIENT
INNER JOIN PATIENT_BILL_DETAIL PBD ON PB.ID_PATIENT_BILL = PBD.ID_PATIENT_BILL
WHERE PB.BALANCE_DUE = (SELECT MAX(BALANCE_DUE) FROM PATIENT_BILL)
GROUP BY P.ID_PATIENT,P.PATIENT_NAME, P.PATIENT_ADDRESS, PB.DATE_BILL, PBD.CHARGE, PB.BALANCE_DUE, PBD.ID_PATIENT_BILL_DETAIL
;

4-
CREATE OR REPLACE FUNCTION TOTAL_BALACE(COSTCENTER IN INTEGER, IDBILL IN INTEGER) RETURN INTEGER AS
TOTAL INTEGER := 0;
BEGIN
   SELECT SUM(I.CHARGE)INTO TOTAL FROM PATIENT_BILL_DETAIL PBD INNER JOIN ITEM I ON PBD.ID_ITEM_CODE = I.ID_ITEM_CODE
   INNER JOIN COST_CENTER C ON I.ID_COST_CENTER = C.ID_COST_CENTER
   WHERE I.ID_COST_CENTER = COSTCENTER AND PBD.ID_PATIENT_BILL = IDBILL
   ;
   IF (TOTAL) != 0 THEN
    TOTAL := TOTAL;
   ELSE
    TOTAL := 0;
   END IF;
   RETURN TOTAL;
END;
-------------------------------------

CREATE OR REPLACE FUNCTION TOTAL_NUMBER(COSTCENTER IN INTEGER, IDBILL IN INTEGER) RETURN INTEGER AS
 TOTAL INTEGER := 0;
BEGIN
   SELECT COUNT(I.ID_ITEM_CODE) INTO TOTAL FROM PATIENT_BILL_DETAIL PBD INNER JOIN ITEM I ON PBD.ID_ITEM_CODE = I.ID_ITEM_CODE
   INNER JOIN COST_CENTER C ON I.ID_COST_CENTER = C.ID_COST_CENTER
   WHERE I.ID_COST_CENTER = COSTCENTER AND PBD.ID_PATIENT_BILL = IDBILL
   ;
   IF (TOTAL) != 0 THEN
    TOTAL := TOTAL;
   ELSE
    TOTAL := 0;
   END IF;
   RETURN TOTAL;
END;

5-

CREATE OR REPLACE VIEW INFORMATION_BILL_FUN
AS
SELECT P.ID_PATIENT, P.PATIENT_NAME, P.PATIEN_ADDRESS, PB.DATE_BILL, PB.DATE_ADMITTED, PB.DISCHARGE_DATE
          ,(SELECT TOTAL_NUMBER(100,3500) FROM DUAL) AS TOTAL_NUM, PB.BALANCE_DUE, COUNT(PBD.ID_ITEM_CODE) AS CODE_ITEM,
          (SELECT TOTAL_BALANCE(100,3500) FROM DUAL) AS TOTAL_BALANCE, COUNT(C.ID_COST_CENTER) AS COSTO
    FROM PATIENT_BILL_DETAIL PBD INNER JOIN ITEM I ON PBD.ID_ITEM_CODE = I.ID_ITEM_CODE
       INNER JOIN COST_CENTER C ON I.ID_COST_CENTER = C.ID_COST_CENTER
       INNER JOIN PATIENT_BILL PB ON PB.ID_PATIENT_BILL = PBD.ID_PATIENT_BILL
       INNER JOIN PATIENT P ON P.ID_PATIENT = PB.ID_PATIENT
       WHERE I.ID_COST_CENTER = 100 AND PBD.ID_PATIENT_BILL = 3500
    GROUP BY P.ID_PATIENT, P.PATIENT_NAME, P.PATIEN_ADDRESS, PB.DATE_BILL, PB.DATE_ADMITTED, PB.DISCHARGE_DATE
          ,PB.BALANCE_DUE, PBD.ID_ITEM_CODE,
           C.ID_COST_CENTER;



7- 
ALTER TABLE ITEM ADD UNITS_AVAILABLE INTEGER;

UPDATE ITEM SET UNITS_AVAILABLE=dbms_random.value(10, 100)
WHERE CHARGE IS NOT NULL;


8-
create or replace TRIGGER "TR_UPDATE_STOCK" 
AFTER INSERT ON PATIENT_BILL_DETAIL
FOR EACH ROW
BEGIN     
  UPDATE ITEM SET UNITS_AVAILABLE = UNITS_AVAILABLE - :New.UNITS_AVAILABLE 
  WHERE  ID_ITEM_CODE = :New.ID_ITEM_CODE;
END;

9-

CREATE OR REPLACE PROCEDURE CHANGE_ITEM_CHARGE IS
BEGIN
    UPDATE ITEM
    SET CHARGE = (CHARGE*1.02)
    WHERE ID_COST_CENTER IN (SELECT COST_CENTER.ID_COST_CENTER FROM COST_CENTER WHERE COST_NAME = 'Room and board');
    
    UPDATE ITEM
    SET CHARGE = (CHARGE*1.035)
    WHERE ID_COST_CENTER IN (SELECT COST_CENTER.ID_COST_CENTER FROM COST_CENTER WHERE COST_NAME = 'Laboratory');
    
    UPDATE ITEM
    SET CHARGE = (CHARGE*1.04)
    WHERE ID_COST_CENTER IN (SELECT COST_CENTER.ID_COST_CENTER FROM COST_CENTER WHERE COST_NAME = 'Radiology');
END;
EXEC CHANGE_ITEM_CHARGE;
